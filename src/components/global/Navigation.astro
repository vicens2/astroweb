---
import { Image } from "astro:assets";
import { getLocalizedSettings } from "@/lib/localization-helpers";
import { translatePath, unlocalizedUrl } from "@/lib/localization-helpers";
import { defaultLocale, locales } from "site";

const currentLocale = Astro.currentLocale;

function getTranslatedUrl(locale: string): string {
	const unlocalizedPath = unlocalizedUrl(Astro.url.pathname);
	return translatePath(locale, unlocalizedPath);
}

function isActiveLocale(locale: string): boolean {
	return locale === currentLocale;
}

const { header, contacts } = getLocalizedSettings(currentLocale);

const logoPath = header.logo?.imagePath;

const images = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/global/**/*.{webp,jpeg,jpg,png,gif,svg}",
);
---

<style>
	/* Menu Icon Styles */
	.menu-icon {
		position: relative;
		width: 40px;
		height: 40px;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		z-index: 1001; /* Higher than navigation */
		pointer-events: auto;
		transition: transform 0.3s ease, opacity 0.3s ease;
	}

	.menu-icon:hover {
		transform: scale(1.3);
	}

	.menu-icon:active {
		transform: scale(0.96);
	}

	.menu-icon__checkbox {
		position: absolute;
		width: 100%;
		height: 100%;
		margin: 0;
		top: 0;
		left: 0;
		z-index: 5;
		opacity: 0;
		cursor: pointer;
		pointer-events: auto;
	}

	.menu-icon__lines {
		position: relative;
		width: 24px;
		height: 16px;
	}

	.menu-icon .line {
		display: block;
		height: 2px;
		width: 20px;
		background: #000000;
		border-radius: 5rem;
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		position: absolute;
		left: 0;
		transform-origin: center;
	}

	/* Efecto hover en las líneas */
	.menu-icon:not(.menu-icon__checkbox:checked) + .menu-icon__lines:hover .line-1 {
		transform: translateY(-2px);
	}

	.menu-icon:not(.menu-icon__checkbox:checked) + .menu-icon__lines:hover .line-3 {
		transform: translateY(2px);
	}

	/* Efecto hover cuando el menú está abierto */
	.menu-icon__checkbox:checked + .menu-icon__lines:hover .line-1,
	.menu-icon__checkbox:checked + .menu-icon__lines:hover .line-3 {
		transform: translateY(-50%) rotate(0);
	}

	.menu-icon__checkbox:checked + .menu-icon__lines:hover .line-1 {
		transform: translateY(-50%) rotate(45deg) scaleX(1.1);
	}

	.menu-icon__checkbox:checked + .menu-icon__lines:hover .line-3 {
		transform: translateY(-50%) rotate(-45deg) scaleX(1.1);
	}

	.line-1 {
		top: 0;
		transform-origin: center;
	}

	.line-2 {
		top: 50%;
		transform: translateY(-50%);
		opacity: 1;
		transform-origin: center;
	}

	.line-3 {
		top: 100%;
		transform-origin: center;
	}

	/* Hamburger to X animation */
	.menu-icon__checkbox:checked + .menu-icon__lines .line-1 {
		top: 50%;
		transform: translateY(-50%) rotate(45deg);
	}

	.menu-icon__checkbox:checked + .menu-icon__lines .line-2 {
		transform: translateY(-50%) scaleX(0);
		opacity: 0;
	}

	.menu-icon__checkbox:checked + .menu-icon__lines .line-3 {
		top: 50%;
		transform: translateY(-50%) rotate(-45deg);
	}

	/* Navigation Overlay */
	#navigation {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		height: 100vh;
		width: 100vw;
		display: none;
		align-items: center;
		justify-content: center;
		z-index: 900;
		pointer-events: none;
		overflow: hidden;
	}

	/* Asegurar que el botón del menú esté siempre visible */
	.header-container {
		position: relative;
		z-index: 10000;
	}

	.menu-icon-container {
		position: relative;
		z-index: 10001;
	}

	#navigation-background {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: #000;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	/* Navigation Menu */
	nav {
		position: relative;
		z-index: 10;
		width: 100%;
		max-width: 1200px;
		padding: 2rem;
	}

	ul {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	/* Menu Items */
	[data-nav-item] {
		opacity: 0;
		transform: translateY(20px);
	}

	[data-nav-item] a {
		display: block;
		text-decoration: none;
		color: #fff;
		font-size: 2.5rem;
		font-weight: 700;
		transition: color 0.3s ease;
	}

	[data-nav-item] a:hover {
		color: #3b82f6;
	}

	/* Language Switcher */
	.language-switcher {
		display: flex;
		gap: 1rem;
		margin-top: 2rem;
	}

	.language-switcher a {
		text-decoration: none;
		color: #6b7280;
		font-size: 0.875rem;
		text-transform: uppercase;
		letter-spacing: 0.05em;
		transition: color 0.3s ease;
	}

	.language-switcher a:hover,
	.language-switcher a.active-locale {
		color: #000;
		font-weight: 600;
	}

	/* Responsive Adjustments */
	@media (min-width: 768px) {
		[data-nav-item] a {
			font-size: 4rem;
		}

		.language-switcher {
			position: absolute;
			bottom: 2rem;
			right: 2rem;
		}
	}

	@media (min-width: 1024px) {
		[data-nav-item] a {
			font-size: 5rem;
		}

		.menu-icon:hover span:first-child {
			transform: translateY(-2px);
		}

		.menu-icon:hover span:last-child {
			transform: translateY(2px);
		}
	}
</style>

<style is:global>
	[data-nav-text-reveal] {
		opacity: 0;
	}
	[data-nav-text-reveal] > div {
		position: relative;
		margin: 0;
	}
	.split-parent {
		overflow: hidden;
	}
	.split-child {
		display: inline-block;
	}
</style>

<header class="fixed w-full z-30 h-16">
	<div class="header-container items-center auto-cols-fr grid-cols-2 lg:grid-cols-2 grid-rows-[auto] justify-between left-0 py-0 px-4 lg:px-12 right-0 top-0 grid gap-4 h-full">
		<div class="items-center flex-wrap justify-start relative flex text-blue-700 z-20 h-full">
			<a
				href="/"
				id="header-logo"
				class="text-blue-700 justify-self-start lg:justify-self-center underline inline-block max-w-full"
			>
				<svg
					version="1.1"
					id="CompanyLogo"
					xmlns="http://www.w3.org/2000/svg"
					xmlns:xlink="http://www.w3.org/1999/xlink"
					x="0px"
					y="0px"
					viewBox="0 0 300 300"
					width="32"
					height="32"
					class="w-6 h-6 lg:w-8 lg:h-8"
					xml:space="preserve"
				>
					<style type="text/css">
						.st0 {
							clip-path: url(#PathR_00000030484139693231530050000007202149904154527160_);
							fill: none;
							stroke: #000000;
							stroke-width: 28;
							stroke-miterlimit: 10;
						}

						.st1 {
							clip-path: url(#PathL_00000111906239159643029990000008763162307303549323_);
							fill: none;
							stroke: #000000;
							stroke-width: 28;
							stroke-miterlimit: 10;
						}
					</style>
					<g>
						<defs>
							<path
								id="PathR"
								d="M286.4,71.8V233c0,3-0.2,6-0.8,8.9c-2.9,16.3-30.6,53.1-61.2,53.4c0,0-40,1.6-60.4-26.3
			c-0.3-0.5-0.3-1.1,0.1-1.5l12.7-12.7c0.5-0.5,1.2-0.4,1.6,0c2.7,2.9,16.5,21.7,40.9,20.2c33.6-2,45.2-34.9,45.2-43.8
			c0,0,0.8-172.4,0.1-175.2c-10-42-63.4-38.8-84.5-14.7l-59.6,60.1c-3,3-4.6,7.1-4.6,11.3c-0.1,1-0.2,2.1-0.2,3.1l-2.6,57.8
			c0,2.6,0.7,5,2.1,7.2c2.1,3.3,20.2,29.4,19.7,29.9c-3.8,3.8-8.5,8.5-12.2,12.2c-0.4,0.4-1.1,0.5-1.5,0.1
			c-3.6-3-15.9-18.9-25.6-38.4c-2.2-4.4-1.5-4.7-1.5-10.1l0.8-59c-0.8-19.3,3.4-22.9,15.9-35.6l51.1-51
			C178,16.3,183.5,1.1,234.8,5.8c22.2,2.1,38.7,17.3,47.5,32.4c2.7,4.7,4.1,10.1,4.1,15.5C286.4,60,286.4,67.3,286.4,71.8z"
							></path>
						</defs>
						<clipPath
							id="PathR_00000047739257205995265260000000317677073555739302_"
						>
							<use xlink:href="#PathR" style="overflow:visible;"
							></use>
						</clipPath>

						<path
							id="MaskR"
							style="clip-path:url(#PathR_00000047739257205995265260000000317677073555739302_);fill:none;stroke:#000000;stroke-width:28;stroke-miterlimit:10;"
							class="logo-path-mask"
							d="
		M132,218.3l-27-38.3v-77.1c0,0,50.7-57.2,60.4-67.4c9.7-10.2,42.1-22.5,52.3-23.4s31.3,5.1,38.3,12.1s17.9,1.1,20.6,42.7
		s0,163.9,0,163.9s-3.9,24.8-15.2,34.5c-11.3,9.7-22.7,20.3-33.4,19.8s-25.9-3.7-31.3-5.3c-5.4-1.6-28.6-22.1-28.6-22.1"
							></path>
					</g>
					<g>
						<defs>
							<path
								id="PathL"
								d="M13.6,228.2V67c0-3,0.2-6,0.8-8.9C17.2,41.7,45,5,75.6,4.7c0,0,40-1.6,60.4,26.3c0.3,0.5,0.3,1.1-0.1,1.5
			l-12.7,12.7c-0.5,0.5-1.2,0.4-1.6,0c-2.9-2.8-16.6-21.7-41-20.2C47,27,35.4,59.8,35.4,68.7c0,0-0.8,172.4-0.1,175.2
			c10,42,63.4,38.8,84.5,14.7l59.6-60.1c3-3,4.6-7.1,4.6-11.3c0.1-1,0.2-2.1,0.2-3.1l2.6-57.8c0-2.6-0.7-5-2.1-7.2
			c-2.1-3.3-20.2-29.4-19.7-29.9c3.8-3.8,8.5-8.5,12.2-12.2c0.4-0.4,1.1-0.5,1.5-0.1c3.6,3,15.9,18.9,25.6,38.4
			c2.2,4.4,1.5,4.7,1.5,10.1l-0.8,59c0.8,19.3-3.4,22.9-15.9,35.6L138,271c-15.9,12.6-21.5,27.9-72.8,23.1
			C43,292,26.5,276.8,17.7,261.7c-2.7-4.7-4.1-10.1-4.1-15.5C13.6,240,13.6,232.7,13.6,228.2z"
							></path>
						</defs>
						<clipPath
							id="PathL_00000141443442153955986570000000888460909890178439_"
						>
							<use xlink:href="#PathL" style="overflow:visible;"
							></use>
						</clipPath>

						<path
							id="MaskL"
							style="clip-path:url(#PathL_00000141443442153955986570000000888460909890178439_);fill:none;stroke:#000000;stroke-width:28;stroke-miterlimit:10;"
							class="logo-path-mask"
							d="
		M132,42c0,0-16.7-31.9-52.3-29.8S24.2,58.7,24.2,58.7v192c0,0,12.4,25.9,28.6,31.3c16.2,5.4,45.8,2.7,53.9,0s65.3-58.8,65.3-58.8
		l21.6-22.7l3.2-78.7L171,78.7"
							></path>
					</g>
				</svg>
			</a>
		</div>
		
		<div class="justify-self-end col-span-1 row-span-1 z-[9999] col-start-3 relative">
			<div class="menu-icon-container items-center justify-center relative flex h-full w-12">
					<label class="menu-icon" aria-label="Menú">
					<input
						id="menu-toggle"
						class="menu-icon__checkbox"
						type="checkbox"
						aria-label="Alternar menú"
					/>
					<div class="menu-icon__lines">
						<span class="line line-1"></span>
						<span class="line line-2"></span>
						<span class="line line-3"></span>
					</div>
				</label>
			</div>

			
		</div>
	</div>

	<div
		id="navigation"
		class="fixed inset-0 z-40 h-screen w-full overflow-hidden bg-transparent transition-all duration-500 ease-in-out"
		style="opacity: 0; pointer-events: none;"
	>
		<div
			id="navigation-background"
			class="bg-white w-full h-full absolute top-0 left-0 opacity-0"
		>
			<div class="absolute inset-0 bg-black"></div>
		</div>

		<div class="relative z-10 flex h-full w-full items-center justify-center">
			<nav class="relative z-10 w-full max-w-5xl px-6 lg:px-12">
				<ul class="space-y-8">
					{header.navItems.map((item, index) => (
						<li
							key={index}
							class="overflow-hidden"
							data-nav-item
							style="opacity: 0; transform: translateY(20px);"
						>
							<a
								href={item.url}
								class="block text-4xl font-bold uppercase tracking-tight text-white transition-colors hover:text-primary-500 md:text-6xl lg:text-7xl"
								data-cursor="hover"
								data-cursor-style="border"
							>
								{item.label}
							</a>
						</li>
					))}
				</ul>

				<div class="mt-16 flex flex-wrap items-center gap-8">
					{contacts.phone && (
						<a
							href={`tel:${contacts.phone.replace(/\s/g, "")}`}
							class="text-lg font-medium uppercase tracking-wider text-white transition-colors hover:text-primary-500"
							data-cursor="hover"
							data-cursor-style="border"
						>
							{contacts.phone}
						</a>
					)}

					{contacts.email && (
						<a
							href={`mailto:${contacts.email}`}
							class="text-lg font-medium uppercase tracking-wider text-white transition-colors hover:text-primary-500"
							data-cursor="hover"
							data-cursor-style="border"
						>
							{contacts.email}
						</a>
					)}

					{contacts.address && (
						<address class="not-italic text-white">
							<p class="text-lg font-medium uppercase tracking-wider">
								{contacts.address}
	
							</p>
						</address>
					)}
				</div>
			</nav>
		</div>
	</div>
</header>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";

	// Register GSAP plugins
	gsap.registerPlugin(ScrollTrigger);

	// Initialize when DOM is fully loaded
	document.addEventListener('DOMContentLoaded', () => {
		// Initialize menu elements
		const menuToggle = document.getElementById('menu-toggle') as HTMLInputElement;
		const navigation = document.getElementById('navigation');
		const menuItems = Array.from(document.querySelectorAll<HTMLElement>('[data-nav-item]'));
		const navigationBackground = document.querySelector<HTMLElement>('#navigation-background');
		const menuIcon = document.querySelector<HTMLElement>('.menu-icon');
		const languageSwitcher = document.querySelector<HTMLElement>('[data-language-switcher]');
		const languageDropdown = document.querySelector<HTMLElement>('[data-language-dropdown]');
		let isMenuOpen = false;

		// Simple menu toggle functionality
		if (menuToggle && navigation && navigationBackground) {
			const toggleMenu = (open: boolean) => {
				isMenuOpen = open;
				menuToggle.checked = open;
				
				if (isMenuOpen) {
					// Open menu
					navigation.style.display = 'flex';
					setTimeout(() => {
						navigation.style.opacity = '1';
						navigation.style.pointerEvents = 'auto';
						document.body.style.overflow = 'hidden';
						document.documentElement.style.overflow = 'hidden';
						navigationBackground.style.opacity = '0.7';

						// Animate menu items
						gsap.to(menuItems, {
							y: 0,
							top: 0,
							opacity: 1,
							duration: 0.5,
							ease: 'power3.out',
							stagger: 0.1
						});
					}, 10);
				} else {
					// Close menu
					navigation.style.opacity = '0';
					navigation.style.pointerEvents = 'none';
					document.body.style.overflow = '';
					document.documentElement.style.overflow = '';
					navigationBackground.style.opacity = '0';

					// Reset menu items
					gsap.set(menuItems, {
						y: 20,
						top: 0,
						opacity: 0
					});

					setTimeout(() => {
						if (!isMenuOpen) {
							navigation.style.display = 'none';
						}
					}, 300);
				}
			};

			// Toggle menu on checkbox change
			menuToggle.addEventListener('change', (e) => {
				toggleMenu((e.target as HTMLInputElement).checked);
			});

			// Close menu when clicking on a navigation link
			menuItems.forEach(item => {
				item.addEventListener('click', () => {
					if (isMenuOpen) {
						toggleMenu(false);
					}
				});
			});

			// Close menu when clicking outside
			navigation.addEventListener('click', (e) => {
				if (e.target === navigation) {
					toggleMenu(false);
				}
			});

			// Add hover effect to menu items
			if (window.innerWidth >= 768) {
				menuItems.forEach(item => {
					item.addEventListener('mouseenter', () => {
						if (isMenuOpen) {
							gsap.to(item, { y: -5, duration: 0.3, ease: 'power2.out' });
						}
					});

					item.addEventListener('mouseleave', () => {
						gsap.to(item, { y: 0, duration: 0.3, ease: 'power2.out' });
					});
				});
			}
		}

		// Language dropdown toggle
		if (languageSwitcher && languageDropdown) {
			languageSwitcher.addEventListener('click', (e) => {
				e.stopPropagation();
				languageDropdown.classList.toggle('hidden');
			});

			// Close dropdown when clicking outside
			document.addEventListener('click', (e) => {
				const target = e.target as HTMLElement;
				if (!languageSwitcher.contains(target) && !languageDropdown.contains(target)) {
					languageDropdown.classList.add('hidden');
				}
			});
		}

		// Navigation border reveal on scroll
		const header = document.querySelector('header');
		if (header) {
			const updateHeader = () => {
				if (window.scrollY > 10) {
					header.style.backgroundColor = 'rgba(255, 255, 255, 0.95)';
					header.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
				} else {
					header.style.backgroundColor = 'transparent';
					header.style.boxShadow = 'none';
				}
			};

			// Initial check
			updateHeader();

			// Update on scroll with debounce
			let scrollTimeout: number;
			const handleScroll = () => {
				clearTimeout(scrollTimeout);
				scrollTimeout = window.setTimeout(updateHeader, 10);
			};

			window.addEventListener('scroll', handleScroll, { passive: true });

			// Cleanup
			return () => {
				window.removeEventListener('scroll', handleScroll);
			};
		}

		// Handle window resize
		window.addEventListener('resize', () => {
			if (window.innerWidth < 768) {
				// Reset any mobile-specific styles if needed
			}
		});
	});
</script>
