---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import * as cartUtils from "@/lib/cart";

// Get category from URL
const url = new URL(Astro.request.url);
const categoryParam = url.searchParams.get('category') || '';

// Define local cart item type for this file
type LocalCartItem = {
  id: string;
  title: string;
  price: string;
  image?: string;
  description?: string;
  category?: string;
  quantity: number;
};

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Datos del catálogo con las categorías solicitadas
const allCatalogItems = [
  // Fotomatones
  {
    id: 'fotomaton-clasico',
    title: "Fotomatón Clásico",
    description: "Diversión garantizada con nuestro fotomatón clásico, incluye accesorios y fondos personalizados.",
    image: "https://images.unsplash.com/photo-1527525443983-6e60c75fff46?w=800&auto=format&fit=crop",
    category: 'fotomatones',
    price: "Desde 300€"
  },
  {
    id: 'fotomaton-vintage',
    title: "Fotomatón Vintage",
    description: "Estilo retro con acabados en madera y efectos fotográficos clásicos.",
    image: "https://images.unsplash.com/photo-1508700115892-45ecd05ae2ad?w=800&auto=format&fit=crop",
    category: 'fotomatones',
    price: "Desde 350€"
  },
  
  // Plataformas 360
  {
    id: 'plataforma-360-basica',
    title: "Plataforma 360° Básica",
    description: "Vídeos en 360° con iluminación profesional y efectos personalizables.",
    image: "https://images.unsplash.com/photo-1519225421980-715cb0215a4c?w=800&auto=format&fit=crop",
    category: 'plataformas360',
    price: "Desde 400€"
  },
  {
    id: 'plataforma-360-premium',
    title: "Plataforma 360° Premium",
    description: "Experiencia 360° con realidad aumentada y efectos especiales.",
    image: "https://images.unsplash.com/photo-1501386761578-eacb0b3f8ba0?w=800&auto=format&fit=crop",
    category: 'plataformas360',
    price: "Desde 600€"
  },
  
  // Fondos
  {
    id: 'fondo-pantalla-verde',
    title: "Fondo Pantalla Verde",
    description: "Fondo profesional chroma key para efectos especiales en postproducción.",
    image: "https://images.unsplash.com/photo-1519225421980-715cb0215a4c?w=800&auto=format&fit=crop",
    category: 'fondos',
    price: "Desde 150€"
  },
  {
    id: 'fondo-personalizado',
    title: "Fondo Personalizado",
    description: "Diseña tu propio fondo con imágenes o logotipos corporativos.",
    image: "https://images.unsplash.com/photo-1522542550221-31fd19575a2d?w=800&auto=format&fit=crop",
    category: 'fondos',
    price: "Desde 250€"
  },
  
  // Neones
  {
    id: 'cartel-neon-personalizado',
    title: "Cartel de Neón Personalizado",
    description: "Iluminación LED de neón con diseño personalizado para tu evento.",
    image: "https://images.unsplash.com/photo-1572635149010-ffd7c5133ab1?w=800&auto=format&fit=crop",
    category: 'neones',
    price: "Desde 200€"
  },
  {
    id: 'letras-neon',
    title: "Letras de Neón",
    description: "Letras iluminadas con tecnología LED para personalizar tu espacio.",
    image: "https://images.unsplash.com/photo-1618761714954-0b8cd0026356?w=800&auto=format&fit=crop",
    category: 'neones',
    price: "Desde 180€"
  },
  
  // Álbumes
  {
    id: 'album-fotografico',
    title: "Álbum Fotográfico Premium",
    description: "Álbum de lujo con hasta 100 fotografías de tu evento.",
    image: "https://images.unsplash.com/photo-1544947950-fa07a98d237f?w=800&auto=format&fit=crop",
    category: 'albumes',
    price: "Desde 120€"
  },
  {
    id: 'libro-fotografico',
    title: "Libro Fotográfico",
    description: "Libro de tapa dura con las mejores imágenes de tu evento.",
    image: "https://images.unsplash.com/photo-1541963463532-d68292c34b19?w=800&auto=format&fit=crop",
    category: 'albumes',
    price: "Desde 80€"
  }
];

// Categorías del catálogo
const categories = [
  { id: 'fotomatones', name: 'Fotomatones' },
  { id: 'plataformas360', name: 'Plataformas 360°' },
  { id: 'fondos', name: 'Fondos' },
  { id: 'neones', name: 'Neones' },
  { id: 'albumes', name: 'Álbumes' }
];

// Estado inicial
let selectedCategory = 'all';
let filteredItems = [...allCatalogItems];

// Si estamos en el servidor, obtener la categoría de la URL
if (typeof window === 'undefined') {
  const url = new URL(Astro.request.url);
  const categoryParam = url.searchParams.get('category');
  const searchTerm = url.searchParams.get('searchTerm') || '';
  
  if (categoryParam) {
    // Filter items based on search and category
    const filteredItems = allCatalogItems.filter(item => {
      const matchesSearch = item.title.toLowerCase().includes(searchTerm) || 
                           item.description.toLowerCase().includes(searchTerm);
      const matchesCategory = !categoryParam || item.category === categoryParam;
      return matchesSearch && matchesCategory;
    });
  }
}

// Función para formatear el precio
const formatPrice = (price: string) => {
  return price.replace('€', '€').trim();
};
---

<BaseLayout showCart={true}>
  <main class="min-h-screen bg-white py-20 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto">
      <div class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
          {categoryParam ? 
            `Catálogo de ${categoryParam.charAt(0).toUpperCase() + categoryParam.slice(1)}` : 
            t("catalog.fullCatalog")
          }
        </h1>
        {categoryParam && (
          <a 
            href="/catalog" 
            class="inline-flex items-center mt-4 text-sm text-blue-600 hover:text-blue-800 font-medium"
          >
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Ver todos los productos
          </a>
        )}
        <p class="text-xl text-gray-600 max-w-3xl mx-auto">
          {t("catalog.filterByCategory")}
        </p>
      </div>

      <!-- Filtros -->
      <div class="flex flex-wrap justify-center gap-3 mb-12 px-4">
        <button 
          onclick="window.filterProducts('all')"
          data-category="all"
          class:list={[
            "category-filter px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 shadow-sm cursor-pointer",
            selectedCategory === 'all' 
              ? "bg-gray-900 text-white shadow-md" 
              : "bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-md"
          ]}
        >
          {t("catalog.allCategories")}
        </button>
        {categories.map(cat => (
          <button 
            onclick={`window.filterProducts('${cat.id}')`}
            data-category={cat.id}
            class:list={[
              "category-filter px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 shadow-sm whitespace-nowrap cursor-pointer",
              selectedCategory === cat.id 
                ? "bg-gray-900 text-white shadow-md" 
                : "bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-md"
            ]}
          >
            {cat.name}
          </button>
        ))}
      </div>

      <!-- Grid de productos -->
      <div id="products-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 px-4">
        {filteredItems.length > 0 ? (
          filteredItems.map(item => (
            <div 
              class="group relative bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 flex flex-col h-full cursor-pointer"
              data-category={item.category}
              data-product-id={item.id}
              data-product-title={item.title}
              data-product-description={item.description || ''}
              data-product-price={item.price}
              data-product-image={item.image}
              data-product-category={item.category}
              onclick="if (!event.target.closest('.add-to-cart-btn')) { event.preventDefault(); event.stopPropagation(); showProductDetails(this) }"
            >
              <div class="relative overflow-hidden flex-grow">
                <img 
                  src={item.image} 
                  alt={item.title}
                  class="w-full h-64 object-cover transition-transform duration-500 group-hover:scale-105"
                  loading="lazy"
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex flex-col justify-between p-6">
                  <div class="flex justify-end">
                    <span class="text-white font-bold text-lg bg-black/70 px-4 py-2 rounded-full">
                      {formatPrice(item.price)}
                    </span>
                  </div>
                  <div class="mt-auto">
                    <button 
                      class="add-to-cart-btn w-full bg-white text-gray-900 font-semibold py-3 px-6 rounded-lg hover:bg-gray-100 transition-colors duration-300 flex items-center justify-center gap-2 z-10 relative"
                      data-product-id={item.id}
                      data-product-title={item.title}
                      data-product-price={item.price}
                      data-product-image={item.image}
                      data-product-category={item.category}
                      onclick="event.stopPropagation(); 
                      const btn = event.target.closest('button');
                      const category = btn.dataset.productCategory;
                      
                      // For fotomatones, plataformas and albumes, show the product details modal first
                      if (category === 'fotomatones' || category === 'plataformas360' || category === 'albumes') {
                        showProductDetails(btn);
                      } else {
                        // For other categories, add directly to cart
                        if (window.cart) { 
                          window.cart.addItem({ 
                            id: btn.dataset.productId, 
                            name: btn.dataset.productTitle, 
                            price: parseFloat(btn.dataset.productPrice.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0, 
                            image: btn.dataset.productImage,
                            category: btn.dataset.productCategory
                          });
                          window.cart.toggleCart(true);
                        }
                      }"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                      Añadir a la cesta
                    </button>
                  </div>
                </div>
              </div>
              <div class="p-6 flex flex-col flex-grow">
                <div class="flex justify-between items-start mb-2">
                  <span class="inline-block bg-indigo-100 text-indigo-800 text-xs px-2 py-1 rounded-full font-medium">
                    {item.category}
                  </span>
                  <h3 class="text-xl font-bold text-gray-900 line-clamp-1">{item.title}</h3>
                </div>
                <p class="text-gray-600 text-sm mb-4 line-clamp-3 flex-grow">{item.description}</p>
                <div class="flex justify-between items-center mt-auto" data-price={item.price.replace(/[^0-9,.]/g, '').replace(',', '.')}>
                  <span class="text-lg font-bold text-gray-900">
                    {formatPrice(item.price)}
                  </span>
                  <button 
                    class="text-sm font-medium text-indigo-600 hover:text-indigo-500 transition-colors flex items-center"
                    data-product-id={item.id}
                    data-product-title={item.title}
                    data-product-description={item.description || ''}
                    data-product-price={item.price}
                    data-product-image={item.image}
                    data-product-category={item.category}
                    onclick="event.stopPropagation(); showProductDetails(this)"
                  >
                    {t("catalog.viewDetails")}
                    <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          ))
        ) : (
          <div class="col-span-full text-center py-12">
            <p class="text-gray-500">No se encontraron productos en esta categoría.</p>
          </div>
        )}
          </div>
    </div>
  </main>
  
  {/* Product Details Modal */}
  <div id="productModal" class="fixed inset-0 z-50 hidden overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true" onclick="closeModal()"></div>
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      
      <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
        <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
          <div class="sm:flex sm:items-start">
            <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
              <div class="flex justify-between items-start">
                <h3 class="text-2xl leading-6 font-bold text-gray-900 mb-4" id="modal-title">
                  Detalles del Producto
                </h3>
                <button type="button" class="text-gray-400 hover:text-gray-500" onclick="closeModal()">
                  <span class="sr-only">Cerrar</span>
                  <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="bg-gray-100 rounded-lg overflow-hidden">
                  <img id="modal-product-image" src="" alt="" class="w-full h-80 object-cover">
                </div>
                <div>
                  <div class="mb-4">
                    <span id="modal-product-category" class="inline-block bg-indigo-100 text-indigo-800 text-xs px-2 py-1 rounded-full font-medium mb-2"></span>
                    <h2 id="modal-product-title" class="text-2xl font-bold text-gray-900 mb-2"></h2>
                    <p id="modal-product-description" class="text-gray-600 mb-4"></p>
                    <div class="mb-6">
                      <div id="hour-selection" class="hidden mb-4">
                        <p class="text-sm font-medium text-gray-700 mb-2">Selecciona la duración:</p>
                        <div class="flex gap-2">
                          <button type="button" data-hours="1" class="hour-option flex-1 py-2 px-3 border rounded-md text-sm font-medium transition-colors duration-200 bg-white text-gray-700 border-gray-300 hover:bg-gray-50">
                            1 hora
                          </button>
                          <button type="button" data-hours="2" class="hour-option flex-1 py-2 px-3 border rounded-md text-sm font-medium transition-colors duration-200 bg-white text-gray-700 border-gray-300 hover:bg-gray-50">
                            2 horas
                          </button>
                          <button type="button" data-hours="3" class="hour-option flex-1 py-2 px-3 border rounded-md text-sm font-medium transition-colors duration-200 bg-white text-gray-700 border-gray-300 hover:bg-gray-50">
                            3 horas
                          </button>
                        </div>
                        <div id="additional-hours-container" class="mt-3">
                          <label for="additional-hours" class="block text-sm font-medium text-gray-700 mb-1">Horas adicionales</label>
                          <div class="flex rounded-md shadow-sm">
                            <button type="button" id="decrease-hours" class="px-3 py-2 border border-r-0 border-gray-300 bg-gray-50 text-gray-500 hover:bg-gray-100 rounded-l-md disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                              <span class="sr-only">Disminuir horas</span>
                              <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                              </svg>
                            </button>
                            <input type="number" id="additional-hours" min="0" value="0" class="flex-1 min-w-0 block w-full px-3 py-2 text-center border-t border-b border-gray-300 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-gray-50 text-gray-500" disabled>
                            <button type="button" id="increase-hours" class="px-3 py-2 border border-l-0 border-gray-300 bg-gray-50 text-gray-500 hover:bg-gray-100 rounded-r-md disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                              <span class="sr-only">Aumentar horas</span>
                              <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                              </svg>
                            </button>
                          </div>
                          <p id="additional-hours-help" class="mt-1 text-xs text-gray-500">Disponible solo para 3 horas</p>
                        </div>
                      </div>
                      <div class="space-y-1">
                        <div class="flex items-center">
                          <span id="modal-product-price" class="text-2xl font-bold text-gray-900"></span>
                          <span id="price-per-hour" class="ml-2 text-sm text-gray-500 hidden">/hora</span>
                        </div>
                        <div id="total-hours-display" class="text-sm text-gray-500 hidden">
                          Total: <span id="total-hours">1</span> horas
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div class="border-t border-gray-200 pt-4">
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Este producto incluye:</h3>
                    <ul id="product-includes" class="space-y-2">
                      <!-- Filled by JavaScript -->
                    </ul>
                  </div>
                  
                  <!-- Sección de personalización para álbumes -->
                  <div id="album-customization" class="hidden mt-6 space-y-4">
                    <div>
                      <label for="album-color" class="block text-sm font-medium text-gray-700 mb-1">Color del álbum</label>
                      <div class="flex space-x-2">
                        <button type="button" class="w-8 h-8 rounded-full bg-red-500 border-2 border-transparent focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" data-color="rojo" onclick="selectAlbumColor('rojo', this)" aria-label="Color rojo"></button>
                        <button type="button" class="w-8 h-8 rounded-full bg-blue-500 border-2 border-transparent focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" data-color="azul" onclick="selectAlbumColor('azul', this)" aria-label="Color azul"></button>
                        <button type="button" class="w-8 h-8 rounded-full bg-green-500 border-2 border-transparent focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" data-color="verde" onclick="selectAlbumColor('verde', this)" aria-label="Color verde"></button>
                        <button type="button" class="w-8 h-8 rounded-full bg-yellow-400 border-2 border-transparent focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" data-color="amarillo" onclick="selectAlbumColor('amarillo', this)" aria-label="Color amarillo"></button>
                        <button type="button" class="w-8 h-8 rounded-full bg-black border-2 border-transparent focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" data-color="negro" onclick="selectAlbumColor('negro', this)" aria-label="Color negro"></button>
                      </div>
                      <input type="hidden" id="selected-album-color" value="">
                    </div>
                    
                    <div>
                      <label for="album-text" class="block text-sm font-medium text-gray-700 mb-1">Texto personalizado (opcional)</label>
                      <input type="text" id="album-text" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="Ej: Nuestra Boda 2023" maxlength="30">
                    </div>
                    
                    <div>
                      <label for="album-date" class="block text-sm font-medium text-gray-700 mb-1">Fecha del evento</label>
                      <input type="date" id="album-date" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    </div>
                  </div>
                  
                  <div class="mt-6">
                    <button 
                      id="add-to-cart-modal" 
                      class="w-full bg-indigo-600 text-white py-3 px-6 rounded-lg hover:bg-indigo-700 transition-colors duration-300 flex items-center justify-center gap-2"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                      Añadir al carrito
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  // Client-side code with proper type safety
  
  // Extend Window interface to include our custom properties
  interface CustomWindow extends Window {
    filterProducts?: (category: string) => void;
  }
  
  // Add filterProducts to window object if it exists
  if (typeof window !== 'undefined') {
    (window as CustomWindow).filterProducts = function(category: string) {
      // Update active state of filter buttons
      var buttons = document.querySelectorAll('.category-filter');
      
      // Reset all buttons to inactive state
      Array.prototype.forEach.call(buttons, function(btn) {
        if (btn && btn.classList) {
          btn.classList.remove('bg-gray-900', 'text-white', 'shadow-md');
          btn.classList.add('bg-gray-100', 'text-gray-700', 'hover:bg-gray-200', 'hover:shadow-md');
        }
      });
      
      // Highlight the active button
      var activeBtn = Array.prototype.find.call(buttons, function(btn) {
        if (!btn) return false;
        var btnCategory = btn.getAttribute('data-category') || 'all';
        return btnCategory === category;
      });
      
      if (activeBtn) {
        activeBtn.classList.remove('bg-gray-100', 'text-gray-700', 'hover:bg-gray-200', 'hover:shadow-md');
        activeBtn.classList.add('bg-gray-900', 'text-white', 'shadow-md');
      }

      // Filter products
      var productGrid = document.getElementById('products-grid');
      if (!productGrid) return;
      
      var productContainers = productGrid.children;
      console.log('Total de contenedores de productos:', productContainers.length);
      
      for (var i = 0; i < productContainers.length; i++) {
        var container = productContainers[i] as HTMLElement;
        if (!container) continue;
        
        var productCategory = container.getAttribute('data-category') || '';
        console.log('Producto:', container, 'Categoría:', productCategory);
        
        if (category === 'all' || productCategory === category) {
          console.log('Mostrando producto de categoría:', productCategory);
          (container as HTMLElement).style.display = 'block';
        } else {
          console.log('Ocultando producto de categoría:', productCategory);
          (container as HTMLElement).style.display = 'none';
        }
      }

      // Update URL without reloading
      var newUrl = category === 'all' 
        ? window.location.pathname 
        : window.location.pathname + '?category=' + encodeURIComponent(category);
      
      window.history.pushState({}, '', newUrl);
    };
  }
  
  // Define product type
  interface CartItem {
    id: string;
    title: string;
    price: string | number;
    image: string;
    description: string;
    category: string;
    quantity: number;
    hours?: number;
  }
  
  // Define cart updated event detail type
  interface CartUpdatedEventDetail {
    cart: CartItem[];
    addedProduct?: Omit<CartItem, 'quantity'> & { quantity?: number };
  }

  // Format price to ensure it has exactly 2 decimal places
  const formatPrice = (price: string | number): string => {
    // Convert to number if it's a string
    const num = typeof price === 'string' 
      ? parseFloat(price.replace(/[^0-9.,]/g, '').replace(',', '.'))
      : price;
    // Handle invalid numbers
    if (isNaN(num)) return '0.00';
    // Format to 2 decimal places
    return num.toFixed(2);
  };

  // Product creation helper with proper type
  const createProduct = (productData: Omit<CartItem, 'quantity'> & { quantity?: number }): CartItem => {
    // Format price using the formatPrice function
    const price = formatPrice(productData.price || '0');
    
    return {
      id: productData.id,
      title: productData.title || 'Producto sin nombre',
      price: price, // Use the formatted price
      image: productData.image || '',
      description: productData.description || '',
      category: productData.category || 'sin-categoria',
      quantity: productData.quantity || 1
    };
  };
  
  // Update cart count in the UI
  const updateCartCount = (cart: CartItem[]): void => {
    const totalItems = cart.reduce((sum, item) => sum + (item.quantity || 0), 0);
    const cartCount = document.getElementById('cart-count');
    
    if (cartCount) {
      cartCount.textContent = totalItems.toString();
      const cartElement = cartCount as HTMLElement;
      cartElement.style.display = totalItems > 0 ? 'inline-flex' : 'none';
    }
    
    // Also update any other cart count elements
    const cartCountElements = document.querySelectorAll('.cart-count');
    cartCountElements.forEach((el: Element) => {
      if (el && 'textContent' in el) {
        el.textContent = totalItems.toString();
        (el as HTMLElement).style.display = totalItems > 0 ? 'inline-flex' : 'none';
      }
    });
  }

  /**
   * Shows a notification message
   * @param message - The message to display
   */
  const showNotification = (message: string): void => {
    // No longer showing any notifications
    return;
  }

  // Get or initialize cart from localStorage
  const getLocalCart = (): CartItem[] => {
    try {
      const cartData = localStorage.getItem('cart');
      return cartData ? JSON.parse(cartData) : [];
    } catch (e) {
      console.error('Error reading cart from localStorage:', e);
      return [];
    }
  };

  // Save cart to localStorage
  const saveLocalCart = (cart: CartItem[]): void => {
    try {
      localStorage.setItem('cart', JSON.stringify(cart));
      updateCartCount(cart);
      
      // Dispatch cart updated event
      const event = new CustomEvent('cart-updated', { 
        detail: { cart } 
      });
      window.dispatchEvent(event);
    } catch (e) {
      console.error('Error saving cart to localStorage:', e);
    }
  };
  
  // Handle cart functionality
  const handleCart = (): void => {
    // Handle add to cart button clicks
    const handleAddToCartClick = (e: Event) => {
      const target = e.target as HTMLElement;
      const button = target.closest('[data-product-id]');
      
      if (!button) return;
      
      e.preventDefault();
      e.stopPropagation();
      
      const productCard = button.closest('.group') as HTMLElement | null;
      if (!productCard) return;
      
      // Get product data from data attributes or DOM elements
      const productId = button.getAttribute('data-product-id') || '';
      const titleElement = productCard.querySelector('h3');
      const priceElement = productCard.querySelector('[data-price]');
      const imgElement = productCard.querySelector('img');
      
      // Parse price to a number
      const priceText = priceElement?.getAttribute('data-price') || '0';
      const price = parseFloat(priceText.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0;
      
      // Create product object for the cart
      const productName = titleElement?.textContent?.trim() || 'Producto';
      const product = {
        id: productId,
        name: productName,
        price: price,
        image: imgElement?.getAttribute('src') || '',
        category: productCard.getAttribute('data-category') || '',
        hours: productName.includes('Álbum Fotográfico Premium') ? 1 : 0
      };
      
      // Use the global cart instance to add the item
      if (window.cart) {
        window.cart.addItem(product);
        
        // Show notification
        showNotification('Producto añadido al carrito');
        
        // Open the cart
        window.cart.toggleCart(true);
      } else {
        console.error('Cart not initialized');
      }
    };
    
    // Add single event listener for add to cart buttons
    document.removeEventListener('click', handleAddToCartClick); // Remove any existing listener
    document.addEventListener('click', handleAddToCartClick);
    
    // Also add click handlers to any existing buttons (in case of dynamic content)
    const addToCartButtons = document.querySelectorAll('.add-to-cart');
    
    // Handle add to cart button clicks with proper type assertion
    document.addEventListener('click', function(e: MouseEvent) {
      const target = e.target as HTMLElement | null;
      if (!target) return;
      
      // Find the closest add-to-cart button
      const addToCartButton = target.closest?.('[data-product-id]') as HTMLElement | null;
      if (!addToCartButton) return;
      
      e.preventDefault();
      
      // Find the product card
      const productCard = addToCartButton.closest?.('.group') as HTMLElement | null;
      if (!productCard) return;
      
      const productId = addToCartButton.getAttribute('data-product-id') || '';
      const titleElement = productCard.querySelector('h3');
      const descElement = productCard.querySelector('p.text-gray-600');
      const imgElement = productCard.querySelector('img');
      const priceContainer = productCard.querySelector('div[data-price]');
      
      // Extract product data with fallbacks
      var productTitle = 'Producto';
      if (titleElement && titleElement.textContent) {
        productTitle = titleElement.textContent.trim();
      }
      const product = {
        id: productId,
        title: productTitle,
        price: priceContainer?.getAttribute('data-price') || '0',
        image: imgElement?.getAttribute('src') || '',
        description: descElement?.textContent || '',
        category: productCard.getAttribute('data-product-category') || ''
      };
      
      addToCart(product);
    });
  }


  // Initialize when DOM is ready
  const initialize = (): void => {
    handleCart();
    
    // Initialize cart count from the global cart
    const updateCartCountFromGlobal = () => {
      if (window.cart) {
        const count = window.cart.getCart().reduce((sum, item) => sum + (item.quantity || 1), 0);
        const cartCount = document.getElementById('cart-count');
        if (cartCount) {
          cartCount.textContent = count.toString();
          cartCount.classList.toggle('hidden', count === 0);
        }
      }
    };
    
    // Update cart count when the cart changes
    window.addEventListener('cart-updated', updateCartCountFromGlobal);
    
    // Initial update
    updateCartCountFromGlobal();
    
    // Dispatch initial cart loaded event with current cart state
    if (window.cart) {
      const currentCart = window.cart.getCart();
      window.dispatchEvent(new CustomEvent('cart-loaded', { 
        detail: { cart: currentCart } 
      }));
    }
  };

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    // If DOM is already loaded, run initialization
    setTimeout(initialize, 0);
  }
  
  // Listen for cart updates from other components
  window.addEventListener('cart-updated', ((event: CustomEvent<CartUpdatedEventDetail>) => {
    if (event.detail?.cart) {
      updateCartCount(event.detail.cart);
    }
  }) as EventListener);
  
  // Handle additional hours input
  function setupAdditionalHours(basePrice: number): { getAdditionalHours: () => number } {
    const additionalHoursInput = document.getElementById('additional-hours') as HTMLInputElement;
    const decreaseBtn = document.getElementById('decrease-hours') as HTMLButtonElement;
    const increaseBtn = document.getElementById('increase-hours') as HTMLButtonElement;
    const priceElement = document.getElementById('modal-product-price');
    const additionalHoursHelp = document.getElementById('additional-hours-help');
    
    // Default return value in case elements are not found
    const defaultReturn = {
      getAdditionalHours: (): number => 0
    };
    
    if (!additionalHoursInput || !decreaseBtn || !increaseBtn || !priceElement || !additionalHoursHelp) {
      return defaultReturn;
    }
    
    // Clone the buttons to remove all event listeners
    const newDecreaseBtn = decreaseBtn.cloneNode(true) as HTMLButtonElement;
    const newIncreaseBtn = increaseBtn.cloneNode(true) as HTMLButtonElement;
    
    // Replace the original buttons with the cloned ones
    if (decreaseBtn.parentNode) {
      decreaseBtn.parentNode.replaceChild(newDecreaseBtn, decreaseBtn);
    }
    if (increaseBtn.parentNode) {
      increaseBtn.parentNode.replaceChild(newIncreaseBtn, increaseBtn);
    }
    
    // Update price and total hours display
    const updatePrice = (): void => {
      const additionalHours = parseInt(additionalHoursInput.value || '0');
      const hours = 3 + additionalHours;
      const totalPrice = basePrice * hours;
      priceElement.textContent = `${totalPrice}€`;
      
      // Update total hours display
      const totalHoursDisplay = document.getElementById('total-hours');
      if (totalHoursDisplay) {
        totalHoursDisplay.textContent = hours.toString();
      }
    };
    
    // Decrease hours button
    newDecreaseBtn.addEventListener('click', (e: MouseEvent) => {
      e.preventDefault();
      const currentValue = parseInt(additionalHoursInput.value || '0');
      if (currentValue > 0) {
        additionalHoursInput.value = (currentValue - 1).toString();
        updatePrice();
      }
    });
    
    // Increase hours button
    newIncreaseBtn.addEventListener('click', (e: MouseEvent) => {
      e.preventDefault();
      const currentValue = parseInt(additionalHoursInput.value || '0');
      // If current value is 0, set to 1, otherwise increment by 1
      const newValue = currentValue === 0 ? 1 : currentValue + 1;
      additionalHoursInput.value = newValue.toString();
      updatePrice();
    });
    
    // Handle direct input
    additionalHoursInput.addEventListener('change', () => {
      const value = parseInt(additionalHoursInput.value);
      if (isNaN(value) || value < 0) {
        additionalHoursInput.value = '0';
      }
      updatePrice();
    });
    
    return {
      getAdditionalHours: () => parseInt(additionalHoursInput.value || '0')
    };
  }

  // Handle hour selection
  function setupHourSelection(category: string, basePrice: number) {
    const hourSelection = document.getElementById('hour-selection');
    const pricePerHour = document.getElementById('price-per-hour');
    const priceElement = document.getElementById('modal-product-price');
    const additionalHoursInput = document.getElementById('additional-hours') as HTMLInputElement;
    const decreaseBtn = document.getElementById('decrease-hours') as HTMLButtonElement;
    const increaseBtn = document.getElementById('increase-hours') as HTMLButtonElement;
    const additionalHoursHelp = document.getElementById('additional-hours-help');
    
    if (!hourSelection || !priceElement || !additionalHoursInput || !decreaseBtn || !increaseBtn || !additionalHoursHelp) return;
    
    // Show hour selection only for specific categories
    const showHourSelection = ['fotomatones', 'plataformas360'].includes(category);
    
    if (showHourSelection) {
      hourSelection.classList.remove('hidden');
      if (pricePerHour) pricePerHour.classList.remove('hidden');
      
      // Set initial price for 1 hour
      priceElement.textContent = `${basePrice}€`;
      
      // Add click handlers for hour buttons
      const hourButtons = document.querySelectorAll('.hour-option');
      hourButtons.forEach(btn => {
        btn.addEventListener('click', function() {
          // Remove active class from all buttons
          hourButtons.forEach(b => b.classList.remove('bg-indigo-100', 'border-indigo-500', 'text-indigo-700'));
          
          // Add active class to clicked button
          this.classList.add('bg-indigo-100', 'border-indigo-500', 'text-indigo-700');
          
          // Update UI based on selected hours
          const hours = parseInt(this.getAttribute('data-hours') || '1');
          const additionalHoursInput = document.getElementById('additional-hours') as HTMLInputElement;
          const decreaseBtn = document.getElementById('decrease-hours') as HTMLButtonElement;
          const increaseBtn = document.getElementById('increase-hours') as HTMLButtonElement;
          const additionalHoursHelp = document.getElementById('additional-hours-help');
          
          // Enable/disable additional hours input based on selection
          const isThreeHours = hours === 3;
          
          if (additionalHoursInput) {
            additionalHoursInput.disabled = !isThreeHours;
            if (!isThreeHours) additionalHoursInput.value = '0';
          }
          
          if (decreaseBtn) decreaseBtn.disabled = !isThreeHours;
          if (increaseBtn) increaseBtn.disabled = !isThreeHours;
          
          // Update help text
          if (additionalHoursHelp) {
            additionalHoursHelp.textContent = isThreeHours 
              ? 'Añade horas adicionales si lo necesitas' 
              : 'Disponible solo para 3 horas';
          }
          
          // Calculate and update price and hours
          const additionalHours = hours === 3 ? parseInt((document.getElementById('additional-hours') as HTMLInputElement)?.value || '0') : 0;
          const totalHours = hours === 3 ? 3 + additionalHours : hours;
          const totalPrice = basePrice * totalHours;
          if (priceElement) priceElement.textContent = `${totalPrice}€`;
          
          // Update total hours display
          const totalHoursDisplay = document.getElementById('total-hours');
          const totalHoursContainer = document.getElementById('total-hours-display');
          if (totalHoursDisplay && totalHoursContainer) {
            totalHoursDisplay.textContent = totalHours.toString();
            totalHoursContainer.classList.toggle('hidden', !['fotomatones', 'plataformas360'].includes(category));
          }
        });
      });
      
      // Set first button as active by default
      const firstButton = hourButtons[0] as HTMLElement;
      if (firstButton) firstButton.click();
    } else {
      hourSelection.classList.add('hidden');
      if (pricePerHour) pricePerHour.classList.add('hidden');
      priceElement.textContent = `${basePrice}€`;
    }
  }

  // Función para seleccionar el color del álbum
  function selectAlbumColor(color: string, element: HTMLElement) {
    // Remover la clase de borde de todos los botones de color
    document.querySelectorAll('[data-color]').forEach(btn => {
      btn.classList.remove('ring-2', 'ring-indigo-500', 'ring-offset-2');
      btn.classList.add('border-transparent');
    });
    
    // Añadir la clase de borde al botón seleccionado
    element.classList.remove('border-transparent');
    element.classList.add('ring-2', 'ring-indigo-500', 'ring-offset-2');
    
    // Actualizar el valor oculto
    const colorInput = document.getElementById('selected-album-color') as HTMLInputElement;
    if (colorInput) {
      // Asegurarse de que el color se guarde en minúsculas para consistencia
      colorInput.value = color.toLowerCase();
      console.log('Color seleccionado:', colorInput.value); // Para depuración
    }
  }

  // Product details modal functions
  function showProductDetails(button: HTMLElement | null) {
    if (!button) return;
    
    const modalTitle = document.getElementById('modal-product-title');
    const modalDescription = document.getElementById('modal-product-description');
    const modalPrice = document.getElementById('modal-product-price');
    const modalCategory = document.getElementById('modal-product-category');
    const modalImage = document.getElementById('modal-product-image') as HTMLImageElement | null;
    const addToCartBtn = document.getElementById('add-to-cart-modal');
    const albumCustomization = document.getElementById('album-customization');
    
    if (!modalTitle || !modalDescription || !modalPrice || !modalCategory || !modalImage || !addToCartBtn || !albumCustomization) return;
    
    // Resetear el formulario de personalización
    const colorInput = document.getElementById('selected-album-color') as HTMLInputElement;
    const albumText = document.getElementById('album-text') as HTMLInputElement;
    const albumDate = document.getElementById('album-date') as HTMLInputElement;
    
    if (colorInput && albumText && albumDate) {
      colorInput.value = '';
      albumText.value = '';
      albumDate.value = '';
      
      // Resetear selección de colores
      document.querySelectorAll('[data-color]').forEach(btn => {
        btn.classList.remove('ring-2', 'ring-indigo-500', 'ring-offset-2');
        btn.classList.add('border-transparent');
      });
    }
    
    // Clear any existing click handlers to prevent duplicates
    const newAddToCartBtn = addToCartBtn.cloneNode(true);
    addToCartBtn.parentNode?.replaceChild(newAddToCartBtn, addToCartBtn);
    
    // Store product data in the button for later use
    const productData = {
      id: button.getAttribute('data-product-id') || '',
      title: button.getAttribute('data-product-title') || '',
      price: button.getAttribute('data-product-price') || '',
      image: button.getAttribute('data-product-image') || '',
      category: button.getAttribute('data-product-category') || '',
      type: button.getAttribute('data-product-category') === 'albumes' ? 'album' : 'standard',
      hours: 1 // Default to 1 hour
    };
    
    // Mostrar u ocultar la sección de personalización según el tipo de producto
    if (albumCustomization) {
      const isAlbum = productData.type === 'album';
      albumCustomization.classList.toggle('hidden', !isAlbum);
      
      // Si es un álbum, establecer la fecha mínima como hoy
      if (isAlbum) {
        const today = new Date().toISOString().split('T')[0];
        const albumDate = document.getElementById('album-date') as HTMLInputElement;
        if (albumDate) {
          albumDate.min = today;
          albumDate.value = today; // Establecer la fecha actual por defecto
        }
      }
    }
    
    // Add click handler to the new button
    newAddToCartBtn.addEventListener('click', function() {
      // Use the global cart instance to add the item
      if (window.cart) {
        const price = parseFloat(productData.price.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0;
        
        // Get selected hours and additional hours
        const hourButton = document.querySelector('.hour-option.bg-indigo-100');
        const selectedHours = hourButton ? parseInt(hourButton.getAttribute('data-hours') || '1') : 1;
        const additionalHours = selectedHours === 3 ? 
          parseInt((document.getElementById('additional-hours') as HTMLInputElement)?.value || '0') : 0;
        
        const isAlbum = productData.type === 'album';
        const hours = isAlbum ? 1 : (selectedHours === 3 ? 3 + additionalHours : selectedHours);
        
        // Update product data with hours
        productData.hours = hours;
        
        // Obtener detalles de personalización si es un álbum
        let albumCustomization = null;
        if (isAlbum) {
          const colorInput = document.getElementById('selected-album-color') as HTMLInputElement;
          const albumText = document.getElementById('album-text') as HTMLInputElement;
          const albumDate = document.getElementById('album-date') as HTMLInputElement;
          
          // Validar que se haya seleccionado un color
          if (!colorInput || !colorInput.value) {
            alert('Por favor, selecciona un color para el álbum');
            return;
          }
          
          // Validar que se haya ingresado una fecha
          if (!albumDate || !albumDate.value) {
            alert('Por favor, selecciona una fecha para el evento');
            return;
          }
          
          albumCustomization = {
            color: colorInput.value,
            text: albumText ? albumText.value : '',
            date: albumDate ? albumDate.value : ''
          };
        }
        
        const cartItem = {
          id: productData.id,
          name: productData.title,
          title: productData.title,
          price: isAlbum ? price : (price * hours),
          image: productData.image,
          description: isAlbum ? `Color: ${albumCustomization?.color || 'No especificado'}${albumCustomization?.text ? ` | Texto: ${albumCustomization.text}` : ''}${albumCustomization?.date ? ` | Fecha: ${albumCustomization.date}` : ''}` : '',
          category: productData.category,
          hours: hours,
          customization: isAlbum ? albumCustomization : undefined
        };
        window.cart.addItem(cartItem);
        
        // Close the modal
        closeModal();
        
        // Open the cart
        window.cart.toggleCart(true);
      } else {
        console.error('Cart not initialized');
        // Fallback to localStorage if cart instance is not available
        const cart = getLocalCart();
        const existingItem = cart.find(item => item.id === productData.id);
        
        if (existingItem) {
          existingItem.quantity = (existingItem.quantity || 1) + 1;
        } else {
const cartItem = {
            id: productData.id,
            name: productData.title, // Using name as required by CartItem interface
            title: productData.title, // Also include title for backward compatibility
            price: parseFloat(productData.price.replace(/[^0-9.,]/g, '').replace(',', '.')) || 0,
            image: productData.image,
            description: '', // Add empty description as required by CartItem
            category: productData.category,
            quantity: 1,
            hours: productData.title.includes('Álbum Fotográfico Premium') ? 1 : 0
          };
          cart.push(cartItem);
        }
        
        saveLocalCart(cart);
        closeModal();
      }
    });
    
    const product = {
      id: button.dataset.productId || '',
      title: button.dataset.productTitle || '',
      description: button.dataset.productDescription || '',
      price: button.dataset.productPrice || '',
      image: button.dataset.productImage || '',
      category: button.dataset.productCategory || ''
    };
    
    // Set product details in modal
    if (modalTitle) modalTitle.textContent = productData.title;
    if (modalDescription) modalDescription.textContent = button.getAttribute('data-product-description') || '';
    if (modalCategory) modalCategory.textContent = productData.category;
    if (modalImage) {
      modalImage.src = productData.image;
      modalImage.alt = productData.title;
    }
    
    // Extract base price (remove currency symbol and convert to number)
    const priceText = productData.price.replace(/[^0-9,]/g, '').replace(',', '.');
    const basePrice = parseFloat(priceText) || 0;
    
    // Setup hour selection and additional hours if needed
    setupHourSelection(productData.category, basePrice);
    setupAdditionalHours(basePrice);
    
    // Show/hide total hours display based on category
    const totalHoursContainer = document.getElementById('total-hours-display');
    if (totalHoursContainer) {
      const showHours = ['fotomatones', 'plataformas360'].includes(productData.category);
      totalHoursContainer.classList.toggle('hidden', !showHours);
    }
    
    // The add to cart button is now handled in the first part of the function
    
    // Show includes (example - you can customize this based on your product data)
    const includesList = document.getElementById('product-includes');
    if (includesList) {
      includesList.innerHTML = `
      <li class="flex items-start">
        <svg class="h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
        </svg>
        <span>Entrega e instalación profesional</span>
      </li>
      <li class="flex items-start">
        <svg class="h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
        </svg>
        <span>Soporte técnico durante el evento</span>
      </li>
      <li class="flex items-start">
        <svg class="h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
        </svg>
        <span>Personalización según sus necesidades</span>
      </li>
    `;
    }
    
    // Show modal
    const modal = document.getElementById('productModal');
    if (modal) {
      modal.classList.remove('hidden');
      document.body.classList.add('overflow-hidden');
      document.documentElement.classList.add('overflow-hidden');
    }
  }
  
  function closeModal() {
    const modal = document.getElementById('productModal');
    if (modal) {
      modal.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
      document.documentElement.classList.remove('overflow-hidden');
    }
  }
  
  // Close modal when clicking outside content
  document.addEventListener('click', function(event: MouseEvent) {
    const modal = document.getElementById('productModal');
    if (event.target === modal) {
      closeModal();
    }
  });
  
  // Close modal with Escape key
  document.addEventListener('keydown', function(event: KeyboardEvent) {
    if (event.key === 'Escape') {
      closeModal();
    }
  });
  
  // Expose functions to window
  // Make functions available globally
  if (typeof window !== 'undefined') {
    (window as any).getLocalCart = getLocalCart;
    (window as any).saveLocalCart = saveLocalCart;
    (window as any).showProductDetails = showProductDetails;
    (window as any).closeModal = closeModal;
    (window as any).selectAlbumColor = selectAlbumColor;
  }
</script>

<style>
  .hour-option.active {
    background-color: #e0e7ff;
    border-color: #6366f1;
    color: #4f46e5;
  }
  
  .aspect-w-16 {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 Aspect Ratio */
  }
  
  /* Estilos para la notificación */
  .notification-enter {
    transform: translateY(1rem);
    opacity: 0;
  }
  
  .notification-enter-active {
    transform: translateY(0);
    opacity: 1;
    transition: all 0.3s ease-out;
  }
  
  .notification-exit {
    transform: translateY(0);
    opacity: 1;
  }
  
  .notification-exit-active {
    transform: translateY(-1rem);
    opacity: 0;
    transition: all 0.3s ease-in;
  }
  .aspect-h-9 {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
</style>
